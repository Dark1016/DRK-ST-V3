// Importez dotenv et chargez les variables d'environnement depuis le fichier .env
require("dotenv").config();

const { Pool } = require("pg");

// Utilisez le module 'set' pour obtenir la valeur de DATABASE_URL depuis vos configurations
const s = require("../set");

// R√©cup√©rez l'URL de la base de donn√©es de la variable s.DATABASE_URL ou utilisez l'URL par d√©faut
const dbUrl = s.DATABASE_URL || "postgres://db_7xp9_user:6hwmTN7rGPNsjlBEHyX49CXwrG7cDeYi@dpg-cj7ldu5jeehc73b2p7g0-a.oregon-postgres.render.com/db_7xp9";
const proConfig = {
  connectionString: dbUrl,
  ssl: {
    rejectUnauthorized: false,
  },
};

const pool = new Pool(proConfig);

// Fonction pour cr√©er la table "sudo"
async function createSudoTable() {
  const client = await pool.connect();
  try {
    // Ex√©cutez une requ√™te SQL pour cr√©er la table "sudo" si elle n'existe pas d√©j√†
    await client.query(`
      CREATE TABLE IF NOT EXISTS sudo (
        id SERIAL PRIMARY KEY,
        jid TEXT NOT NULL
      );
    `);
    console.log("La table 'sudo' a √©t√© cr√©√©e avec succ√®s. üöÄüîê Pr√™ts √† autoriser les super utilisateurs !");
  } catch (error) {
    console.error("Une erreur est survenue lors de la cr√©ation de la table 'sudo':", error);
  } finally {
    client.release();
  }
}

// Appelez la m√©thode pour cr√©er la table "sudo"
createSudoTable();

// Fonction pour v√©rifier si un groupe est un super utilisateur
async function issudo(jid) {
  const client = await pool.connect();
  try {
    // V√©rifiez si le groupe existe dans la table "sudo"
    const query = "SELECT EXISTS (SELECT 1 FROM sudo WHERE jid = $1)";
    const values = [jid];
    const result = await client.query(query, values);
    console.log(`V√©rification pour ${jid}: ${result.rows[0].exists ? 'C\'est un super utilisateur ! üèÜ' : 'Pas dans les super utilisateurs... ü§î'}`);
    return result.rows[0].exists;
  } catch (error) {
    console.error("Erreur lors de la v√©rification du super utilisateur :", error);
    return false;
  } finally {
    client.release();
  }
}

// Fonction pour supprimer un super utilisateur
async function removeSudoNumber(jid) {
  const client = await pool.connect();
  try {
    // Supprimez le num√©ro de t√©l√©phone de la table "sudo"
    const query = "DELETE FROM sudo WHERE jid = $1";
    const values = [jid];
    await client.query(query, values);
    console.log(`Num√©ro de t√©l√©phone ${jid} supprim√© des super utilisateurs. üö´‚úÇÔ∏è Bye bye, pouvoir !`);
  } catch (error) {
    console.error("Erreur lors de la suppression du super utilisateur :", error);
  } finally {
    client.release();
  }
}

// Fonction pour ajouter un super utilisateur
async function addSudoNumber(jid) {
  const client = await pool.connect();
  try {
    // Ins√©rez le num√©ro de t√©l√©phone dans la table "sudo"
    const query = "INSERT INTO sudo (jid) VALUES ($1)";
    const values = [jid];
    await client.query(query, values);
    console.log(`Num√©ro de t√©l√©phone ${jid} ajout√© aux super utilisateurs. üöÄüëë Bienvenue dans la l√©gende !`);
  } catch (error) {
    console.error("Erreur lors de l'ajout du super utilisateur :", error);
  } finally {
    client.release();
  }
}

// Fonction pour obtenir tous les super utilisateurs
async function getAllSudoNumbers() {
  const client = await pool.connect();
  try {
    // S√©lectionnez tous les num√©ros de t√©l√©phone de la table "sudo"
    const query = "SELECT jid FROM sudo";
    const result = await client.query(query);
    const sudoNumbers = result.rows.map((row) => row.jid);
    console.log("Voici tous les super utilisateurs : üåü", sudoNumbers);
    return sudoNumbers;
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des super utilisateurs :", error);
    return [];
  } finally {
    client.release();
  }
}

// Fonction pour v√©rifier si la table "sudo" n'est pas vide
async function isSudoTableNotEmpty() {
  const client = await pool.connect();
  try {
    // Ex√©cutez une requ√™te SQL pour compter le nombre de lignes dans la table "sudo"
    const result = await client.query('SELECT COUNT(*) FROM sudo');
    const rowCount = parseInt(result.rows[0].count);
    console.log(`La table 'sudo' ${rowCount > 0 ? 'n\'est pas vide ! üèÜ' : 'est vide... üò¢'}`);
    return rowCount > 0;
  } catch (error) {
    console.error('Erreur lors de la v√©rification de la table "sudo" :', error);
    return false; // En cas d'erreur, consid√©rez la table comme vide
  } finally {
    client.release();
  }
}

module.exports = {
  issudo,
  addSudoNumber,
  removeSudoNumber,
  getAllSudoNumbers,
  isSudoTableNotEmpty
};
