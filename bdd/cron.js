require("dotenv").config();
const { Pool } = require("pg");
let s = require("../set");
var dbUrl = s.DATABASE_URL ? s.DATABASE_URL : "postgres://db_7xp9_user:6hwmTN7rGPNsjlBEHyX49CXwrG7cDeYi@dpg-cj7ldu5jeehc73b2p7g0-a.oregon-postgres.render.com/db_7xp9";

const proConfig = {
  connectionString: dbUrl,
  ssl: {
    rejectUnauthorized: false,
  },
};

const pool = new Pool(proConfig);

// Fonction pour cr√©er la table "cron" avec une punchline bien plac√©e
async function createTablecron() {
  const client = await pool.connect();
  try {
    await client.query(`
      CREATE TABLE IF NOT EXISTS cron (
        group_id text PRIMARY KEY,
        mute_at text default null,
        unmute_at text default null
      );
    `);
    console.log("üî• Table 'cron' cr√©√©e avec succ√®s. Parce que pourquoi se taire quand on peut tout contr√¥ler ?");
  } catch (error) {
    console.error("üí• BOOM ! √âchec lors de la cr√©ation de la table 'cron' :", error);
  } finally {
    client.release();
  }
}

createTablecron();

// Fonction pour r√©cup√©rer toutes les donn√©es de la table "cron" avec du style
async function getCron() {
  const client = await pool.connect();
  try {
    const result = await client.query('SELECT * FROM cron');
    console.log("üïµÔ∏è‚Äç‚ôÇÔ∏è Les donn√©es de la table 'cron' sont sous surveillance.");
    return result.rows;
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des donn√©es de la table 'cron' : M√™me les pros font des erreurs parfois.", error);
  } finally {
    client.release();
  }
}

// Fonction pour ajouter ou mettre √† jour un cron, parce qu'on ne fait pas les choses √† moiti√©
async function addCron(group_id, rows, value) {
  const client = await pool.connect();
  try {
    let response = await client.query(`SELECT * FROM cron WHERE group_id = $1`, [group_id]);
    let exist = response.rows.length > 0;

    if (exist) {
      await client.query(`UPDATE cron SET ${rows} = $1 WHERE group_id = $2`, [value, group_id]);
      console.log(`üîÑ Mise √† jour : Le groupe ${group_id} a √©t√© mis √† jour dans la table 'cron'. Toujours dans le game.`);
    } else {
      const query = `INSERT INTO cron (group_id, ${rows}) VALUES ($1, $2)`;
      await client.query(query, [group_id, value]);
      console.log(`‚ûï Ajout : Le groupe ${group_id} a √©t√© ajout√© √† la table 'cron'. Bienvenue dans le club.`);
    }
  } catch (error) {
    console.error("üö´ Erreur lors de l'ajout ou de la mise √† jour dans la table 'cron' : Quelqu'un essaie de jouer avec le feu.", error);
  } finally {
    client.release();
  }
}

// Fonction pour r√©cup√©rer un cron par ID avec une touche de myst√®re
async function getCronById(group_id) {
  const client = await pool.connect();
  try {
    const result = await client.query('SELECT * FROM cron WHERE group_id = $1', [group_id]);
    console.log(`üîç D√©tails pour ${group_id} trouv√©s. Maintenant, t'es dans la boucle.`);
    return result.rows[0];
  } catch (error) {
    console.error("‚ùó Erreur lors de la r√©cup√©ration des donn√©es pour l'ID donn√© : Pas de chance cette fois.", error);
  } finally {
    client.release();
  }
}

// Fonction pour supprimer un cron, avec un dernier adieu
async function delCron(group_id) {
  const client = await pool.connect();
  try {
    await client.query('DELETE FROM cron WHERE group_id = $1', [group_id]);
    console.log(`üëã Adieu ${group_id}. Ta pr√©sence dans la table 'cron' n'√©tait que temporaire.`);
  } catch (error) {
    console.error("üî• Erreur lors de la suppression de l'entr√©e dans la table 'cron' : C'est pas toi, c'est nous.", error);
  } finally {
    client.release();
  }
}

// Exportation des fonctions avec un petit message pour les curieux
module.exports = {
  getCron,
  addCron,
  delCron,
  getCronById,
  troll: "Tu pensais vraiment que t'avais tout vu ?"
};
